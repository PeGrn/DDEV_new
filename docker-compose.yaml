# Assurez-vous de supprimer la ligne "version: "3"" si ce n'est pas déjà fait

services:
  # PostgreSQL - Data Warehouse - Inchangé
  postgres:
    image: postgres:14
    container_name: nyc_taxi_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nyc_taxi_db
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  # Initialisation PostgreSQL - Inchangé
  postgres-init:
    image: postgres:14
    container_name: postgres-init
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    command: sh -c "until pg_isready -h postgres -p 5432 -U postgres; do sleep 1; done && psql -h postgres -U postgres -f /docker-entrypoint-initdb.d/initdb.sql"
    depends_on:
      postgres:
        condition: service_healthy

  # MinIO - Data Lake - Inchangé
  minio:
    image: minio/minio
    container_name: nyc_taxi_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Airflow - Modifié pour utiliser notre nouvelle image basée sur bitnami/spark
  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-init
    depends_on:
      - postgres
      - postgres-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW_UID: 50000
    command: version
    user: "1001:1001" # Bitnami utilise l'utilisateur 1001 au lieu de 50000
    volumes:
      - ./airflow:/opt/airflow

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-webserver
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__SECRET_KEY: "airflow_secret_key"
    command: bash -c "airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && airflow webserver"
    ports:
      - "8080:8080"
    user: "1001:1001" # Bitnami utilise l'utilisateur 1001 au lieu de 50000
    volumes:
      - ./airflow:/opt/airflow
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/dags/scripts
      - ./jars:/opt/airflow/dags/jars

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    command: airflow scheduler
    user: "1001:1001" # Bitnami utilise l'utilisateur 1001 au lieu de 50000
    volumes:
      - ./airflow:/opt/airflow
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/dags/scripts
      - ./jars:/opt/airflow/dags/jars

  # Spark Master n'est plus nécessaire car l'image bitnami/spark inclut déjà Spark
  # Mais on peut le garder pour le monitoring si souhaité
  spark-master:
    image: bitnami/spark:3.3.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8181:8080"
      - "7077:7077"
    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps # Chemin modifié pour bitnami
      - ./spark/data:/opt/bitnami/spark/data # Chemin modifié pour bitnami

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.3.1
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps # Chemin modifié pour bitnami
      - ./spark/data:/opt/bitnami/spark/data # Chemin modifié pour bitnami

  # dbt container - Inchangé
  dbt:
    build:
      context: ./dbt
      dockerfile: Dockerfile
    container_name: dbt
    depends_on:
      - postgres
    volumes:
      - ./dbt:/usr/app/dbt
    entrypoint: ["/bin/bash", "-c"]
    command: ["pip install pytz && tail -f /dev/null"]

volumes:
  postgres_data:
  minio_data:
